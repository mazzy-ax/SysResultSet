Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: CLS

; Microsoft Dynamics Class: SysResultSetTest выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysResultSetTest
    PROPERTIES
      Name                #SysResultSetTest
      Extends             #SysTestCase
      RunOn               #Server
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #// mazzy, v1.03-ax4, 27.04.2016
        #class SysResultSetTest extends SysTestCase
        #{
        #}
        #
      ENDSOURCE
      SOURCE #testAxTables
        #void testAxTables()
        #{
        #    SqlSystem       sql = new SqlSystem();
        #
        #    CustTrans       trans;
        #    CustTransOpen   open;
        #    RefRecId        trans_recId;
        #    RefRecId        open_recId;
        #
        #    CustTrans       trans_res;
        #    CustTransOpen   open_res;
        #
        #    SysResultSet    resultSet;
        #    int             lineCount;
        #    int             fieldCount;
        #
        #    SysDictTable    dt = SysDictTable::newTableId(trans.TableId);
        #    int             i;
        #    SysDictField    df;
        #;
        #    trans.clear(); // проявляем dataAreaId, соответствующее текущей компании. даже если ct находится в виртуальной компании
        #
        #    resultSet = SysResultSet::executeQuery(strfmt(@"
        #        select top 10
        #            o.AMOUNTMST as o_AMOUNTMST,
        #            o.AMOUNTCUR as o_AMOUNTCUR,
        #            o.DUEDATE as o_DUEDATE,
        #            o.RECID as o_RECID,
        #            t.*
        #        from CUSTTRANS as t
        #        join CUSTTRANSOPEN as o
        #            on (t.DATAAREAID = o.DATAAREAID and t.RECID = o.REFRECID)
        #        where t.DATAAREAID = %1
        #        ", sql.sqlLiteral(trans.dataAreaId)));
        #
        #    this.assertNotNull(resultSet, "resultSet не создан");
        #
        #    while( resultSet.next() )
        #    {
        #        ++lineCount;
        #
        #        open_recId = resultSet.value("o_recId");
        #        this.assertNotEqual(0, open_recId, strfmt("%1: не прочитан open.recid", lineCount));
        #
        #        open = CustTransOpen::find(open_recId);
        #        this.assertEquals(open_recId, open.RecId, strfmt("%1: не найден open с recID %1", lineCount, open_recId));
        #
        #        this.assertEquals(3, resultSet.copyTo(open_res, "o_%1"), strfmt("%1: copyTo скопировал не все поля, указанные в запросе", lineCount));
        #        this.assertEquals(open.AmountCur, open_res.AmountCur, strfmt("%1: не совпадают AmountCur в open и resultSet после copyTo", lineCount));
        #        this.assertEquals(open.AmountMST, open_res.AmountMST, strfmt("%1: не совпадают AmountMST в open и resultSet после copyTo", lineCount));
        #        this.assertEquals(open.DueDate, open_res.DueDate,     strfmt("%1: не совпадают DueDate в open и resultSet после copyTo", lineCount));
        #
        #        //////////////////////////////
        #        trans_recId = resultSet.value("recId");
        #        this.assertNotEqual(0, trans_recId, strfmt("%1: не прочитан trans.recid", lineCount));
        #
        #        trans = CustTrans::find(trans_recId);
        #        this.assertEquals(trans_recId, trans.RecId, strfmt("%1: не найден trans с recID %2", lineCount, trans_recId));
        #
        #        resultSet.copyTo(trans_res);
        #
        #        for(i=1; i<=dt.columnCnt(); ++i )
        #        {
        #            df = new SysDictField(dt.id(), dt.column2id(i));
        #            if( df && df.saveContents() && df.isSql() && !df.isSystem() )
        #            {
        #                this.assertEquals(trans.(df.extendedFieldId()), trans_res.(df.extendedFieldId()), strfmt("%1: не совпадают trans.%2 и resultSet после copyTo", lineCount, df.name()));
        #            }
        #        }
        #        //this.assertTrue(trans.equal(trans_res), strfmt("%1: не совпадают данные в trans и resultSet после copyTo", lineCount));
        #    }
        #
        #    this.assertNotEqual(0, lineCount, "SQL-запрос возвратил пустой resultSet. Возможно, в этой компании нет открытых проводок по клиентам. Для полноценного тестирования класса в компании должно быть по крайней мере 2 открытые проводки");
        #    this.assertNotEqual(1, lineCount, "SQL-запрос возвратил одну строку. Для полноценного тестирования класса в компании должно быть по крайней мере 2 открытые проводки");
        #}
      ENDSOURCE
      SOURCE #testAxTablesTmp
        #void testAxTablesTmp()
        #{
        #    SqlSystem       sql = new SqlSystem();
        #
        #    CustTrans       trans;
        #    TmpAccountSum   accountSum;
        #
        #    SysResultSet    resultSet;
        #;
        #    trans.clear(); // проявляем dataAreaId, соответствующее текущей компании. даже если ct находится в виртуальной компании
        #
        #    resultSet = SysResultSet::executeQuery(strfmt(@"
        #        select top 10
        #            t.AccountNum, sum(t.AmountMST) as Balance02
        #        from CUSTTRANS as t
        #        where t.DATAAREAID = %1
        #        group by AccountNum
        #        ", sql.sqlLiteral(trans.dataAreaId)));
        #
        #    this.assertNotNull(resultSet, "resultSet не создан");
        #
        #    while( resultSet.next() )
        #    {
        #        resultSet.copyTo(accountSum);
        #
        #        this.assertEquals(resultSet.value("AccountNum"), accountSum.AccountNum, "copyTo не скопировал accountNum");
        #        this.assertEquals(resultSet.value("Balance02"), accountSum.Balance02, "copyTo не скопировал Balance02");
        #    }
        #}
      ENDSOURCE
      SOURCE #testCount
        #void testCount()
        #{
        #    SqlSystem       sql = new SqlSystem();
        #    CustTable       cust;
        #    SysResultSet    resultSet;
        #    int             recCount;
        #
        #    int getRecCount()
        #    {
        #        Query q = new Query();
        #        q.addDataSource(cust.TableId);
        #        return SysQuery::countTotal(new QueryRun(q));
        #    }
        #
        #;
        #    recCount = getRecCount();
        #
        #    cust.clear(); // проявляем dataAreaId, соответствующее текущей компании. даже если cust находится в виртуальной компании
        #
        #    // имя колонки не указано
        #    // количество записей, посчитанное разными способами, должно совпадать со значением первой колонки
        #    this.assertEquals(
        #        recCount,
        #        SysResultSet::getFirst(strfmt(@"select count(*) from CUSTTABLE as t where t.DATAAREAID = %1", sql.sqlLiteral(cust.dataAreaId)))
        #    );
        #
        #    // имя колонки указано
        #    // количество записей, посчитанное разными способами, должно совпадать
        #    this.assertEquals(
        #        recCount,
        #        SysResultSet::getFirst(strfmt(@"select 1 as firstCol, count(*) as cnt from CUSTTABLE as t where t.DATAAREAID = %1", sql.sqlLiteral(cust.dataAreaId)), 'cnt')
        #    );
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #void testEmpty()
        #{
        #    this.assertEquals(0, SysResultSet::getFirst(@"select 1 where 1 = 2"));
        #    this.assertEquals(0, SysResultSet::getFirst(@"select 1 as col where 1 = 2","col"));
        #}
      ENDSOURCE
      SOURCE #testEmptyColumns
        #void testEmptyColumns()
        #{
        #    SysResultSet    resultSet = SysResultSet::executeQuery(@"select '' as str, 1 as num where 1 = 2");
        #;
        #    this.assertFalse(resultSet.next());
        #    this.assertEquals(0, resultSet.values().fields()); // после неудачного next стандартный класс возвращает 0!
        #    this.assertEquals(0, resultSet.metaData().getColumnCount()); // после неудачного next стандартный класс возвращает 0!
        #    this.assertEquals("",resultSet.metaData().getColumnName(1)); // если выборка пустая, то нет имен колонок.
        #    this.assertEquals("",resultSet.metaData().getColumnName(2)); // если выборка пустая, то нет имен колонок.
        #    this.assertEquals("",resultSet.metaData().getColumnName(3)); // если выборка пустая, то нет имен колонок. даже если колонок нет
        #    this.assertEquals(1,resultSet.metaData().getColumnType(1)); // а вот тип есть! но он всегда равен 1. очень странно!
        #    this.assertEquals(1,resultSet.metaData().getColumnType(2)); // а вот тип есть! но он всегда равен 1. очень странно!
        #    //resultSet.metaData().getColumnType(3); // а здесь будет исключение. очень странно!
        #}
      ENDSOURCE
      SOURCE #testMeta
        #void testMeta()
        #{
        #    SqlSystem           sql = new SqlSystem();
        #    CustTrans           trans;
        #    SysResultSet        resultSet;
        #    ResultSetMetaData   meta;
        #
        #    int                 lineCount;
        #;
        #    trans.clear(); // проявляем dataAreaId, соответствующее текущей компании. даже если ct находится в виртуальной компании
        #
        #    resultSet = SysResultSet::executeQuery(strfmt(@"
        #        select top 10 accountNum, transDate, sum(amountMST) as amountMST, count(*) from CUSTTRANS
        #        where DATAAREAID = %1
        #        group by accountNum, transDate
        #        ", sql.sqlLiteral(trans.dataAreaId)));
        #
        #    this.assertNotNull(resultSet, "resultSet не создан");
        #    this.assertNotNull(resultSet.resultSet(), "resultSet() не создан");
        #
        #    this.assertNull(resultSet.metaData(), "metadata() до первого next");
        #
        #    meta = resultSet.resultSet().getMetaData();
        #    this.assertNotNull(meta, "MetaData не создана");
        #    this.assertEquals(0,  meta.getColumnCount(), "число колонок до первого next");
        #    this.assertEquals("", meta.getColumnName(1), "имя колонки до первого next");
        #    this.assertEquals(1,  meta.getColumnType(1), "тип колонки до первого next");
        #
        #
        #    while( resultSet.next() )
        #    {
        #        ++lineCount;
        #
        #        this.assertNotNull(resultSet.metaData(), strfmt("%1: metadata() после next", lineCount));
        #        this.assertNotNull(resultSet.values(), strfmt("%1: values() после next", lineCount));
        #
        #        meta = resultSet.resultSet().getMetaData();
        #        this.assertNotNull(meta, strfmt("%1: MetaData после next", lineCount));
        #        this.assertEquals(4,            meta.getColumnCount(), strfmt("%1: число колонок после next", lineCount));
        #        this.assertEquals("accountNum", meta.getColumnName(1), strfmt("%1: имя колонки1 после next", lineCount));
        #        this.assertEquals(0,            meta.getColumnType(1), strfmt("%1: тип колонки1 после next", lineCount));
        #        this.assertEquals("transDate",  meta.getColumnName(2), strfmt("%1: имя колонки2 после next", lineCount));
        #        this.assertEquals(3,            meta.getColumnType(2), strfmt("%1: тип колонки2 после next", lineCount));
        #        this.assertEquals("amountMST",  meta.getColumnName(3), strfmt("%1: имя колонки3 после next", lineCount));
        #        this.assertEquals(2,            meta.getColumnType(3), strfmt("%1: тип колонки3 после next", lineCount));
        #        this.assertEquals("",           meta.getColumnName(4), strfmt("%1: имя колонки4 после next", lineCount));
        #        this.assertEquals(1,            meta.getColumnType(4), strfmt("%1: тип колонки4 после next", lineCount));
        #
        #        this.assertEquals(4,                    resultSet.values().fields(), strfmt("%1: число значений должно совпадать с числом колонок после next", lineCount));
        #        this.assertEquals("accountNum",         resultSet.values().fieldName(1), strfmt("%1: имя значения1 после next", lineCount));
        #        this.assertEquals(Types::String,        resultSet.values().fieldType(1), strfmt("%1: тип значения1 после next", lineCount));
        #        this.assertEquals("transDate",          resultSet.values().fieldName(2), strfmt("%1: имя значения2 после next", lineCount));
        #        this.assertEquals(Types::Date,          resultSet.values().fieldType(2), strfmt("%1: тип значения2 после next", lineCount));
        #        this.assertEquals("amountMST",          resultSet.values().fieldName(3), strfmt("%1: имя значения3 после next", lineCount));
        #        this.assertEquals(Types::Real,          resultSet.values().fieldType(3), strfmt("%1: тип значения3 после next", lineCount));
        #        this.assertEquals("4",                  resultSet.values().fieldName(4), strfmt("%1: имя значения4 после next", lineCount));
        #        this.assertEquals(Types::Integer,       resultSet.values().fieldType(4), strfmt("%1: тип значения4 после next", lineCount));
        #
        #        this.assertEquals(1, resultSet.values().index("accountNum"),strfmt("%1: номер значения1 после next", lineCount));
        #        this.assertEquals(2, resultSet.values().index("transDate"), strfmt("%1: номер значения2 после next", lineCount));
        #        this.assertEquals(3, resultSet.values().index("amountMST"), strfmt("%1: номер значения3 после next", lineCount));
        #        this.assertEquals(4, resultSet.values().index("4"),         strfmt("%1: номер значения4 после next", lineCount));
        #    }
        #
        #    this.assertNotNull(resultSet.metaData(), strfmt("%1: metadata() после цикла", lineCount));
        #    this.assertNotNull(resultSet.values(),   strfmt("%1: values() после цикла", lineCount));
        #
        #    meta = resultSet.resultSet().getMetaData();
        #    this.assertNotNull(meta, strfmt("%1: MetaData не создана", lineCount));
        #    this.assertEquals(4,            meta.getColumnCount(), strfmt("%1: число колонок после цикла", lineCount));
        #    this.assertEquals("accountNum", meta.getColumnName(1), strfmt("%1: имя колонки1 после цикла", lineCount));
        #    this.assertEquals(0,            meta.getColumnType(1), strfmt("%1: тип колонки1 после цикла", lineCount));
        #    this.assertEquals("transDate",  meta.getColumnName(2), strfmt("%1: имя колонки2 после цикла", lineCount));
        #    this.assertEquals(3,            meta.getColumnType(2), strfmt("%1: тип колонки2 после цикла", lineCount));
        #    this.assertEquals("amountMST",  meta.getColumnName(3), strfmt("%1: имя колонки3 после цикла", lineCount));
        #    this.assertEquals(2,            meta.getColumnType(3), strfmt("%1: тип колонки3 после цикла", lineCount));
        #    this.assertEquals("",           meta.getColumnName(4), strfmt("%1: имя колонки4 после цикла", lineCount));
        #    this.assertEquals(1,            meta.getColumnType(4), strfmt("%1: тип колонки4 после цикла", lineCount));
        #
        #    this.assertEquals(4,                    resultSet.values().fields(), "число значений должно совпадать с числом колонок после цикла");
        #    this.assertEquals("accountNum",         resultSet.values().fieldName(1), "имя значения1 после цикла");
        #    this.assertEquals(Types::String,        resultSet.values().fieldType(1), "тип значения1 после цикла");
        #    this.assertEquals("transDate",          resultSet.values().fieldName(2), "имя значения2 после цикла");
        #    this.assertEquals(Types::Date,          resultSet.values().fieldType(2), "тип значения2 после цикла");
        #    this.assertEquals("amountMST",          resultSet.values().fieldName(3), "имя значения3 после цикла");
        #    this.assertEquals(Types::Real,          resultSet.values().fieldType(3), "тип значения3 после цикла");
        #    this.assertEquals("4",                  resultSet.values().fieldName(4), "имя значения4 после цикла");
        #    this.assertEquals(Types::Integer,       resultSet.values().fieldType(4), "тип значения4 после цикла");
        #
        #    this.assertEquals(1, resultSet.values().index("accountNum"),"номер значения1 после цикла");
        #    this.assertEquals(2, resultSet.values().index("transDate"), "номер значения2 после цикла");
        #    this.assertEquals(3, resultSet.values().index("amountMST"), "номер значения3 после цикла");
        #    this.assertEquals(4, resultSet.values().index("4"),         "номер значения4 после цикла");
        #
        #
        #    this.assertNotEqual(0, lineCount, "SQL-запрос возвратил пустой resultSet. Возможно, в этой компании нет открытых проводок по клиентам. Для полноценного тестирования класса в компании должно быть по крайней мере 2 проводки");
        #    this.assertNotEqual(1, lineCount, "SQL-запрос возвратил одну строку. Для полноценного тестирования класса в компании должно быть по крайней мере 2 проводки");
        #}
      ENDSOURCE
      SOURCE #testNull
        #void testNull()
        #{
        #    int i,n;
        #    str columnName;
        #
        #    SysResultSet    resultSet;
        #
        #    this.assertEquals(DatabaseId::MS_Sql_Server, SqlSystem::databaseBackendId()); // протестировано только на MS SQL
        #
        #    resultSet = SysResultSet::executeQuery(@"
        #    select
        #           cast(null as bigint) as bigint,
        #           cast(null as char) as char,
        #           cast(null as date) as date,
        #           cast(null as dateTime) as dateTime,
        #           cast(null as decimal) as decimal,
        #           cast(null as float) as float,
        #           cast(null as money) as money,
        #           cast(null as nchar) as nchar,
        #           cast(null as ntext) as ntext,
        #           cast(null as numeric) as numeric,
        #           cast(null as nvarchar) as nvarchar,
        #           cast(null as real) as real,
        #           cast(null as smallDateTime) as smallDateTime,
        #           cast(null as text) as text,
        #           cast(null as time) as time,
        #           cast(null as tinyint) as tinyint,
        #           cast(null as uniqueidentifier) as uniqueidentifier,
        #           cast(null as varchar) as varchar
        #    ");
        #
        #    this.assertNotNull(resultSet, "resultSet не создан");
        #
        #    this.assertTrue(resultSet.next(), "SQL-запрос возвратил пустой resultSet");
        #
        #    this.assertFalse(resultSet.resultSet().wasNull(1), "wasNull до чтения поля 1"); // метод wasNull дает информацию только после попытки чтения
        #    this.assertFalse(resultSet.resultSet().wasNull(2), "wasNull до чтения поля 2"); // метод wasNull дает информацию только после попытки чтения
        #
        #    n = resultSet.values().fields();
        #    for(i=1; i<=n; ++i)
        #    {
        #        columnName = resultSet.values().fieldName(i);
        #        this.assertTrue(resultSet.resultSet().wasNull(i), strFmt("wasNull после чтения поля %1:%2",i, columnName));
        #        this.assertEquals(resultSet.valueNull(columnName), resultSet.value(columnName), columnName);
        #        this.assertEquals(resultSet.valueNull_idx(i),      resultSet.value_idx(i),      columnName);
        #    }
        #}
      ENDSOURCE
      SOURCE #main
        #static void main(Args args)
        #{
        #    SysTestRunner       runner      = new SysTestRunner(classstr(SysResultSetTest));
        #    SysTestListenerDB   listener    = new SysTestListenerDB();
        #    SysTestJobTable     sysTestJobTable;
        #
        #    runner.getResult().addListener(listener);
        #    runner.run();
        #
        #    sysTestJobTable = SysTestJobTable::find(listener.parmJobId());
        #    infolog.add( sysTestJobTable.Status == SysTestStatus::Passed ? Exception::Info : Exception::Warning,
        #                 strfmt("%3: Тест завершен. %1:%2", sysTestJobTable.TestJobId, sysTestJobTable.Name, sysTestJobTable.Status),
        #                 '', SysInfoAction_TableField::newBuffer(sysTestJobTable) );
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: END
