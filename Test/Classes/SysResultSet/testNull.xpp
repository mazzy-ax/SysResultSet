void testNull()
{
    int i,n;
    str columnName;

    //           cast(null as date) as date,
    //           cast(null as text) as text,
    //           cast(null as smallDateTime) as smallDateTime,
    //           cast(null as time) as time,

    SysResultSet    resultSet;

    this.assertEquals(DatabaseId::MS_Sql_Server, SqlSystem::databaseBackendId()); // протестировано только на MS SQL

    resultSet = SysResultSet::executeQuery(@"
    select
           cast(null as bigint) as bigint,
           cast(null as char) as char,
           cast(null as dateTime) as dateTime,
           cast(null as decimal) as decimal,
           cast(null as float) as float,
           cast(null as money) as money,
           cast(null as nchar) as nchar,
           cast(null as ntext) as ntext,
           cast(null as numeric) as numeric,
           cast(null as nvarchar) as nvarchar,
           cast(null as real) as real,
           cast(null as tinyint) as tinyint,
           cast(null as uniqueidentifier) as uniqueidentifier,
           cast(null as varchar) as varchar
    ");

    this.assertNotNull(resultSet, "resultSet не создан");

    this.assertTrue(resultSet.next(), "SQL-запрос возвратил пустой resultSet");

    this.assertFalse(resultSet.resultSet().wasNull(1), "wasNull до чтения поля 1"); // метод wasNull дает информацию только после попытки чтения
    this.assertFalse(resultSet.resultSet().wasNull(2), "wasNull до чтения поля 2"); // метод wasNull дает информацию только после попытки чтения

    n = resultSet.values().fields();
    for(i=1; i<=n; ++i)
    {
        columnName = resultSet.values().fieldName(i);
        this.assertTrue(resultSet.resultSet().wasNull(i), strFmt("wasNull после чтения поля %1:%2",i, columnName));
        this.assertEquals(resultSet.valueNull(columnName), resultSet.value(columnName), columnName);
        this.assertEquals(resultSet.valueNull_idx(i),      resultSet.value_idx(i),      columnName);
    }
}