void testMeta()
{
    SqlSystem           sql = new SqlSystem();
    CustTrans           trans;
    SysResultSet        resultSet;
    ResultSetMetaData   meta;

    int                 lineCount;
;
    trans.clear(); // проявляем dataAreaId, соответствующее текущей компании. даже если ct находится в виртуальной компании

    resultSet = SysResultSet::executeQuery(strfmt(@"
        select top 10 accountNum, transDate, sum(amountMST) as amountMST, count(*) from CUSTTRANS
        where DATAAREAID = %1
        group by accountNum, transDate
        ", sql.sqlLiteral(trans.dataAreaId)));

    this.assertNotNull(resultSet, "resultSet не создан");
    this.assertNotNull(resultSet.resultSet(), "resultSet() не создан");

    this.assertNull(resultSet.metaData(), "metadata() до первого next");

    meta = resultSet.resultSet().getMetaData();
    this.assertNotNull(meta, "MetaData не создана");
    this.assertEquals(0,  meta.getColumnCount(), "число колонок до первого next");
    this.assertEquals("", meta.getColumnName(1), "имя колонки до первого next");
    this.assertEquals(1,  meta.getColumnType(1), "тип колонки до первого next");


    while( resultSet.next() )
    {
        ++lineCount;

        this.assertNotNull(resultSet.metaData(), strfmt("%1: metadata() после next", lineCount));
        this.assertNotNull(resultSet.values(), strfmt("%1: values() после next", lineCount));

        meta = resultSet.resultSet().getMetaData();
        this.assertNotNull(meta, strfmt("%1: MetaData после next", lineCount));
        this.assertEquals(4,            meta.getColumnCount(), strfmt("%1: число колонок после next", lineCount));
        this.assertEquals("accountNum", meta.getColumnName(1), strfmt("%1: имя колонки1 после next", lineCount));
        this.assertEquals(0,            meta.getColumnType(1), strfmt("%1: тип колонки1 после next", lineCount));
        this.assertEquals("transDate",  meta.getColumnName(2), strfmt("%1: имя колонки2 после next", lineCount));
        this.assertEquals(3,            meta.getColumnType(2), strfmt("%1: тип колонки2 после next", lineCount));
        this.assertEquals("amountMST",  meta.getColumnName(3), strfmt("%1: имя колонки3 после next", lineCount));
        this.assertEquals(2,            meta.getColumnType(3), strfmt("%1: тип колонки3 после next", lineCount));
        this.assertEquals("",           meta.getColumnName(4), strfmt("%1: имя колонки4 после next", lineCount));
        this.assertEquals(1,            meta.getColumnType(4), strfmt("%1: тип колонки4 после next", lineCount));

        this.assertEquals(4,                    resultSet.values().fields(), strfmt("%1: число значений должно совпадать с числом колонок после next", lineCount));
        this.assertEquals("accountNum",         resultSet.values().fieldName(1), strfmt("%1: имя значения1 после next", lineCount));
        this.assertEquals(Types::String,        resultSet.values().fieldType(1), strfmt("%1: тип значения1 после next", lineCount));
        this.assertEquals("transDate",          resultSet.values().fieldName(2), strfmt("%1: имя значения2 после next", lineCount));
        this.assertEquals(Types::UtcDateTime,   resultSet.values().fieldType(2), strfmt("%1: тип значения2 после next", lineCount));
        this.assertEquals("amountMST",          resultSet.values().fieldName(3), strfmt("%1: имя значения3 после next", lineCount));
        this.assertEquals(Types::Real,          resultSet.values().fieldType(3), strfmt("%1: тип значения3 после next", lineCount));
        this.assertEquals("4",                  resultSet.values().fieldName(4), strfmt("%1: имя значения4 после next", lineCount));
        this.assertEquals(Types::Integer,       resultSet.values().fieldType(4), strfmt("%1: тип значения4 после next", lineCount));

        this.assertEquals(1, resultSet.values().index("accountNum"),strfmt("%1: номер значения1 после next", lineCount));
        this.assertEquals(2, resultSet.values().index("transDate"), strfmt("%1: номер значения2 после next", lineCount));
        this.assertEquals(3, resultSet.values().index("amountMST"), strfmt("%1: номер значения3 после next", lineCount));
        this.assertEquals(4, resultSet.values().index("4"),         strfmt("%1: номер значения4 после next", lineCount));
    }

    this.assertNotNull(resultSet.metaData(), strfmt("%1: metadata() после цикла", lineCount));
    this.assertNotNull(resultSet.values(),   strfmt("%1: values() после цикла", lineCount));

    meta = resultSet.resultSet().getMetaData();
    this.assertNotNull(meta, strfmt("%1: MetaData не создана", lineCount));
    this.assertEquals(4,            meta.getColumnCount(), strfmt("%1: число колонок после цикла", lineCount));
    this.assertEquals("accountNum", meta.getColumnName(1), strfmt("%1: имя колонки1 после цикла", lineCount));
    this.assertEquals(0,            meta.getColumnType(1), strfmt("%1: тип колонки1 после цикла", lineCount));
    this.assertEquals("transDate",  meta.getColumnName(2), strfmt("%1: имя колонки2 после цикла", lineCount));
    this.assertEquals(3,            meta.getColumnType(2), strfmt("%1: тип колонки2 после цикла", lineCount));
    this.assertEquals("amountMST",  meta.getColumnName(3), strfmt("%1: имя колонки3 после цикла", lineCount));
    this.assertEquals(2,            meta.getColumnType(3), strfmt("%1: тип колонки3 после цикла", lineCount));
    this.assertEquals("",           meta.getColumnName(4), strfmt("%1: имя колонки4 после цикла", lineCount));
    this.assertEquals(1,            meta.getColumnType(4), strfmt("%1: тип колонки4 после цикла", lineCount));

    this.assertEquals(4,                    resultSet.values().fields(), "число значений должно совпадать с числом колонок после цикла");
    this.assertEquals("accountNum",         resultSet.values().fieldName(1), "имя значения1 после цикла");
    this.assertEquals(Types::String,        resultSet.values().fieldType(1), "тип значения1 после цикла");
    this.assertEquals("transDate",          resultSet.values().fieldName(2), "имя значения2 после цикла");
    this.assertEquals(Types::UtcDateTime,   resultSet.values().fieldType(2), "тип значения2 после цикла");
    this.assertEquals("amountMST",          resultSet.values().fieldName(3), "имя значения3 после цикла");
    this.assertEquals(Types::Real,          resultSet.values().fieldType(3), "тип значения3 после цикла");
    this.assertEquals("4",                  resultSet.values().fieldName(4), "имя значения4 после цикла");
    this.assertEquals(Types::Integer,       resultSet.values().fieldType(4), "тип значения4 после цикла");

    this.assertEquals(1, resultSet.values().index("accountNum"),"номер значения1 после цикла");
    this.assertEquals(2, resultSet.values().index("transDate"), "номер значения2 после цикла");
    this.assertEquals(3, resultSet.values().index("amountMST"), "номер значения3 после цикла");
    this.assertEquals(4, resultSet.values().index("4"),         "номер значения4 после цикла");


    this.assertNotEqual(0, lineCount, "SQL-запрос возвратил пустой resultSet. Возможно, в этой компании нет открытых проводок по клиентам. Для полноценного тестирования класса в компании должно быть по крайней мере 2 проводки");
    this.assertNotEqual(1, lineCount, "SQL-запрос возвратил одну строку. Для полноценного тестирования класса в компании должно быть по крайней мере 2 проводки");
}